#!/usr/bin/env python

# -----------------------------------------------------------------------------
# Copyright (c) 2014--, The American Gut Development Team.
#
# Distributed under the terms of the BSD 3-clause License.
#
# The full license is in the file LICENSE, distributed with this software.
# -----------------------------------------------------------------------------
import click

from psycopg2 import connect, InternalError
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT

# pylint: disable=no-name-in-module
from passlib.hash import bcrypt
# pylint: enable=no-name-in-module

from amgut.connections import ag_data, redis
from amgut.lib.config_manager import AMGUT_CONFIG
from amgut.lib.data_access.env_management import (
    create_database, build_and_initialize, make_settings_table, patch_db,
    populate_test_db, drop_test)


@click.group()
def cli():
    """Commands for managing the American Gut website and database."""


@cli.command()
@click.argument('mode_name', required=True,
                type=click.Choice(['maintenance', 'production']))
@click.option('--message', type=str,
              default='The site is down for maintenance')
def mode(mode_name, message):
    """Enable maintenance or production mode.

    In maintenance mode, active connections will remain active during
    maintenance mode, however logins will be disabled. The 'message' will be
    displayed on the banner for everyone who is logged in, and those going to
    the site to login. Ideally, the message is phrased to indicate that "those
    logged in can continue until ... time."

    In production mode, the banner message is not displayed and logins are
    enabled.
    """
    if mode_name == 'maintenance':
        redis.set('maintenance', message)
        click.echo("Warning, going into maintenance mode. Logins disabled!")
    elif mode_name == 'production':
        redis.delete('maintenance')
        click.echo("Warning, going into production mode. Logins enabled!")


@cli.command()
@click.argument('db', type=click.Choice(['test', 'production']))
@click.option('--force', is_flag=True, default=False,
              help='Continue if the database already exists')
def make(db, force):
    """Creates the specified database."""
    click.echo("Creating database")
    create_database(force)

    if db == 'production':
        build_and_initialize(verbose=True)
        click.echo("Making settings table")
        make_settings_table()
    elif db == 'test':
        # Test database includes initialization and settings table already
        click.echo("Populating the test database")
        populate_test_db()

    click.echo("Applying patches to database")
    patch_db(verbose=True)
    click.echo("{} environment successfully created".format(db))


@cli.command()
@click.option('--force', is_flag=True, default=False,
              help='force removal')
def drop_test(force):
    """Drops the test database, schema, and role."""
    drop_test(verbose=True)


@cli.command()
@click.option('-v', '--verbose', is_flag=True, default=False,
              help='Verbose mode')
def patch(verbose):
    """Applies any unapplied database patches.

    Pulls the current patch from the settings table and applies all subsequent
    patches found in the patches directory.
    """
    patch_db(verbose=verbose)


if __name__ == '__main__':
    cli()
